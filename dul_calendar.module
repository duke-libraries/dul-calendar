<?php
/**
 * @file
 *
 */

function dul_calendar_menu() {
	return array(
		// define menu slugs here
		'test-calendar' => array(
			'page callback' => 'dul_calendar_calendar',
			'access callback' => TRUE,
			'title' => 'Library Calendar',
		),
		'calendar/events' => array(
			'page callback' => 'dul_calendar_calendar',
			'page arguments' => array(1),
			'access callback' => TRUE,
			'title' => 'Library Events Calendar',
		),
		'calendar/hours' => array(
			'page callback' => 'dul_calendar_calendar',
			'page arguments' => array(1),
			'access callback' => TRUE,
			'title' => 'Library Hours',
		),
	);
}

/**
 * Implements hook_theme()
 */
function dul_calendar_theme($existing, $type, $theme, $path) {
	return array(
		'dul-calendar-base' => array(
			'template' => 'dul-calendar-base',
			'path' => $path . '/theme',
		),
	);
}

/**
 * Implements hook_dul_calendar_day_elements
 */
function dul_calendar_dul_calendar_events_elements($dateArray) {
	return FALSE;
}
/**
 * Page callback for Boostrap-y Calendar Example
 */
function dul_calendar_calendar($cal_category, $year = FALSE, $month = FALSE) {
	$build = array();

	date_default_timezone_set('America/New_York');
	$t = NULL;
	if ($year && $month) {
		$t = mktime(0, 0, 0, $month, 1, $year);
	} else {
		$t = time();
	}
	$o = _dul_prepared_calendar_info($t);
	$interval = new DateInterval('P1D');

	$i = 0;
	$table_rows = array();
	$current_row = FALSE;
	while ($o->dateTime->getTimestamp() <= $o->last_cal_day) {
		$current_time = $o->dateTime->getTimestamp();

		if (($i % 7) == 0) {
			if ($current_row !== FALSE) {
				$table_rows[] = $current_row;
			}
			$current_row = array();
		}

		$elements = array();
		$elements[] = array(
			'#markup' => date('j', $current_time),
			'#prefix' => '<div class="text-left">',
			'#suffix' => '</div>',
		);

		$hook = 'dul_calendar_' . $cal_category . '_elements';
	  foreach (module_implements($hook) as $module) {
	    // will call all modules implementing hook_hook_name and 
	    // push the results onto the $result array
	    $new_elements = module_invoke($module, $hook, getdate($current_time));
			if ($new_elements !== FALSE) {
		    $elements = array_merge($elements, $new_elements);
			}
	  }
		$cell = array(
			'data' => $elements,
			'width' => '14.2857%',
		);
		if (date('z', $t) == date('z', $current_time)) {
			$cell['class'] = array('info');
		}
		$current_row[] = $cell;
		
		$o->dateTime->add($interval);
		$i++;
	}

	if ($current_row) {
		$table_rows[] = $current_row;
	}

	$build['calendar-navbar'] = array(
		'#type' => 'container',
		'#attributes' => array('class' => array('row'), 'id' => 'my-special-pet', 'style' => 'margin-bottom: 1em;'),
		'buttons' => array(
			'#type' => 'container',
			'#attributes' => array(
				'class' => array('btn-group', 'span1', ),
			),
			'prevmonth' => array(
				'#markup' => l(
					t('<i class="icon-chevron-left"></i>'), 
					'calendar/' . $cal_category . '/' . $o->aPrevMonth['year'] . '/' . $o->aPrevMonth['mon'], 
					array('html' => TRUE, 'attributes' => array('class' => array('btn')))
				),
			),
			'nextmonth' => array(
				'#markup' => l(
					t('<i class="icon-chevron-right"></i>'), 
					'calendar/' . $cal_category . '/' . $o->aNextMonth['year'] . '/' . $o->aNextMonth['mon'], 
					array('html' => TRUE, 'attributes' => array('class' => array('btn')))
				),
			),
		),
		'month-label' => array(
			'#type' => 'container',
			'#attributes' => array(
				'class' => array('span3'),
			),
			'month-text' => array(
				'#markup' => '<h3>' . date('F Y', $t) . '</h3>',
			),
		),
	);
	$build['calendar-table'] = array(
		'#theme' => 'table',
		'#rows' => $table_rows,
		'#attributes' => array(
			'class' => array('table', 'table-bordered'),
		),
	);
	return $build;
}

function _dul_prepared_calendar_info($ts = NULL) {
	if ($ts == NULL) {
		$ts = time();
	}

	$system_first_weekday_offset = (int)shell_exec('locale first_weekday');

	$iMonth = date('n', $ts);
	$iYear = date('Y', $ts);
	$iDaysInMonth = date('t', $ts);

	$first_day_month = mktime(0, 0, 0, $iMonth, 1, $iYear);
	$last_day_month = mktime(0, 0, 0, $iMonth, $iDaysInMonth, $iYear);

	$dt_first_day = new DateTime();
	$dt_first_day->setTimestamp($first_day_month);
	$dt_last_day = new DateTime();
	$dt_last_day->setTimestamp($last_day_month);

	$sunday_delta = (int)date('w', $dt_first_day->getTimestamp()) * $system_first_weekday_offset;
	$saturday_delta = 6 - ((int)date('w', $dt_last_day->getTimestamp()) * $system_first_weekday_offset);

	$dt_first_sunday = $dt_first_day;
	$dt_first_sunday->sub(new DateInterval('P'.$sunday_delta.'D'));
	$dt_last_saturday = $dt_last_day;
	$dt_last_saturday->add(new DateInterval('P'.$saturday_delta.'D'));
		
	$datetime = $dt_first_sunday;

	$prevMonth = new DateTime();
	$prevMonth->setTimeStamp($datetime->getTimestamp());
	$prevMonth->sub(new DateInterval('P1M'));
	
	$nextMonth = new DateTime();
	$nextMonth->setTimestamp($dt_last_saturday->getTimestamp());
	$nextMonth->add(new DateInterval('P1D'));

	$o = new stdClass();
	$o->dateTime = $datetime;
	$o->days_in_month = $iDaysInMonth;
	$o->month = $iMonth;
	$o->first_cal_day = $dt_first_sunday->getTimestamp();
	$o->last_cal_day = $dt_last_saturday->getTimestamp();
	$o->aNextMonth = getdate($nextMonth->getTimestamp());
	$o->aPrevMonth = getdate($prevMonth->getTimestamp());
	return $o;
}
